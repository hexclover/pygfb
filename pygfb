#!/usr/bin/python
"""
Fontconfig generic font mapping generator
"""

import sys
import argparse
import subprocess
import re
import json
import datetime
try:
    import lxml.etree as ET
    #xml_implementation = 'lxml'
except:
    #xml_implementation = 'xml'
    #import xml.etree.cElementTree as ET
    assert False, 'Please install the lxml module'

debug = False
app_name = 'pygfb'
app_version = '0.01'
app_fullname = app_name + '-' + app_version
rules_filename = 'config.json'
font_types = ['sans-serif', 'serif', 'monospace']
conf_filename = '46-gfb.conf'
fc_cmdline = ('fc-list', '-f', "%{family[0]}\n")
install_script="""\
#!/bin/bash
FILE={}
LOCALFILE="./$FILE"
CONFAVAIL="/etc/fonts/conf.avail/$FILE"
CONFD="/etc/fonts/conf.d/$FILE"

if [ -e "$CONFAVAIL" ]; then
	sudo cp "$CONFAVAIL" "$CONFAVAIL.bak" || exit 1
	echo "Old $CONFAVAIL saved as $CONFAVAIL.bak."
fi
echo "Installing $LOCALFILE as $CONFAVAIL"
sudo install -m 644 "$LOCALFILE" "$CONFAVAIL" || exit 1
echo "Linking $CONFAVAIL to $CONFD"
sudo ln -sfr "$CONFAVAIL" "$CONFD" || exit 1
""".format(conf_filename).encode('utf8')

argparser = argparse.ArgumentParser()
argparser.add_argument('--debug', action='store_true')
args = argparser.parse_args()
debug = args.debug

rules_file = open(rules_filename, 'r')
decoder = json.JSONDecoder()
rules = decoder.decode(rules_file.read())

fc_proc = subprocess.Popen(fc_cmdline, stdout=subprocess.PIPE)
fontlist = fc_proc.stdout.read()
fc_proc.wait()

fontlist = fontlist.decode().strip().split('\n')
# add exact family names to fontlist, even if they are not installed
fontlist.extend(rules['sans-serif-families'])
fontlist.extend(rules['serif-families'])
fontlist.extend(rules['monospace-families'])
fontlist = sorted(set(fontlist))
conf = ET.Element('fontconfig')
conf.append(ET.Comment('Generated by {} on {}'.format(app_fullname, datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S'))))
conf.append(ET.Comment('Do not edit this file by hand.'))

def get_type(font: str, rules):
    for t in font_types:
        if font in rules[t + '-families']:
            return t
    for t in font_types:
        if any(map(lambda s: re.compile(s).search(font), rules[t + '-patterns'])):
            return t

for font in fontlist:
    font_type = get_type(font, rules)
    if font_type:
        assert font_type in font_types
        debug and print (font, 'is classified as', font_type)
        conf_alias = ET.SubElement(conf, 'alias')
        conf_family = ET.SubElement(conf_alias, 'family')
        conf_family.text = font
        conf_default = ET.SubElement(conf_alias, 'default')
        for generic_family in rules[font_type + '-substitutes']:
            conf_generic_family = ET.SubElement(conf_default, 'family')
            conf_generic_family.text = generic_family
    else:
        debug and print(font, 'is not classified')

conf_str = ET.tostring(conf, encoding='utf8', method='xml', pretty_print=True, xml_declaration=True, doctype='<!DOCTYPE fontconfig SYSTEM "fonts.dtd">')
#debug and print(conf_str.decode())
with open(conf_filename, mode='wb') as f:
    f.write(conf_str)

install_proc = subprocess.Popen('sh', stdin=subprocess.PIPE)
print(install_script.decode())
install_proc.communicate(install_script)
install_proc.wait()
